USE ecommerce;

-- BASIC QUESTIONS --
#1 List all unique cities where customers are located.
SELECT DISTINCT customer_city FROM customers;

#2 Count the number of orders placed in 2017.`
SELECT COUNT(*) AS NumberOfOrders FROM orders WHERE YEAR(order_purchase_timestamp) = 2017;

#3 Find the total sales per category.
SELECT UPPER(products.product_category) AS category, ROUND(SUM(payments.payment_value),2) As sales
FROM products INNER JOIN order_items ON products.product_id = order_items.product_id 
INNER JOIN payments ON payments.order_id = order_items.order_id GROUP BY category;

#4 Calculate the percentage of orders that were paid in installments.
SELECT (SUM(CASE WHEN payment_installments >= 1 THEN 1 ELSE 0 END))/ COUNT(*)* 100
AS Istallments_percentage FROM payments;
-- [Alternative code] SELECT SUM(payment_installments >= 1) / COUNT(*) * 100 AS Installments_percentage FROM payments; --

#5. Count the number of customers from each state. 
SELECT customer_state, COUNT(customer_id) AS customer_count 
FROM customers GROUP BY customer_state;

-- INTERMEDIATE QUESTIONS --

#1 Calculate the number of orders per month in 2018.
SELECT monthname(order_purchase_timestamp) AS months, COUNT(order_id) AS order_count 
FROM orders WHERE YEAR(order_purchase_timestamp) = 2018 GROUP BY months;

#2 Find the average number of products per order, grouped by customer city.
WITH count_per_order AS
(
SELECT orders.order_id, orders. customer_id, COUNT(order_items.order_id) AS oc
FROM orders JOIN order_items ON orders.order_id = order_items.order_id
GROUP BY orders.order_id, orders.customer_id
)
SELECT customers.customer_city, ROUND(AVG(count_per_order.oc), 2) AS average_orders
FROM customers JOIN count_per_order ON customers.customer_id = count_per_order.customer_id
GROUP BY customers.customer_city ORDER BY average_orders DESC;

#3 Calculate the percentage of total revenue contributed by each product category.
SELECT UPPER(products.product_category) AS category, 
ROUND(SUM(payments.payment_value)/(SELECT SUM(payment_value) FROM payments)*100,2) As sales_percentage
FROM products INNER JOIN order_items ON products.product_id = order_items.product_id 
INNER JOIN payments ON payments.order_id = order_items.order_id 
GROUP BY category ORDER BY sales_percentage DESC;

#4 Identify the correlation between product price and the number of times a product has been purchased.
SELECT products.product_category, COUNT(products.product_id) AS product_count, ROUND(AVG(order_items.price),2) AS average_item_price FROM order_items JOIN products 
ON order_items.product_id = products.product_id GROUP BY products.product_category;

#5  Calculate the total revenue generated by each seller, and rank them by revenue.
WITH SellerRevenue AS (
    SELECT order_items.seller_id, ROUND(SUM(payments.payment_value), 2) AS revenue 
    FROM order_items JOIN payments ON order_items.order_id = payments.order_id 
    GROUP BY order_items.seller_id
)
SELECT seller_id, revenue, DENSE_RANK() OVER (ORDER BY revenue DESC) AS ranks
FROM SellerRevenue;















