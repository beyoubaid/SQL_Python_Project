USE ecommerce;

-- BASIC QUESTIONS --
#1 List all unique cities where customers are located.
SELECT DISTINCT customer_city FROM customers;

#2 Count the number of orders placed in 2017.`
SELECT COUNT(*) AS NumberOfOrders FROM orders WHERE YEAR(order_purchase_timestamp) = 2017;

#3 Find the total sales per category.
SELECT UPPER(products.product_category) AS category, ROUND(SUM(payments.payment_value),2) As sales
FROM products INNER JOIN order_items ON products.product_id = order_items.product_id 
INNER JOIN payments ON payments.order_id = order_items.order_id GROUP BY category;

#4 Calculate the percentage of orders that were paid in installments.
SELECT (SUM(CASE WHEN payment_installments >= 1 THEN 1 ELSE 0 END))/ COUNT(*)* 100
AS Istallments_percentage FROM payments;
-- [Alternative code] SELECT SUM(payment_installments >= 1) / COUNT(*) * 100 AS Installments_percentage FROM payments; --

#5. Count the number of customers from each state. 
SELECT customer_state, COUNT(customer_id) AS customer_count 
FROM customers GROUP BY customer_state;

-- INTERMEDIATE QUESTIONS --

#1 Calculate the number of orders per month in 2018.
SELECT monthname(order_purchase_timestamp) AS months, COUNT(order_id) AS order_count 
FROM orders WHERE YEAR(order_purchase_timestamp) = 2018 GROUP BY months;

#2 Find the average number of products per order, grouped by customer city.
WITH count_per_order AS
(
SELECT orders.order_id, orders. customer_id, COUNT(order_items.order_id) AS oc
FROM orders JOIN order_items ON orders.order_id = order_items.order_id
GROUP BY orders.order_id, orders.customer_id
)
SELECT customers.customer_city, ROUND(AVG(count_per_order.oc), 2) AS average_orders
FROM customers JOIN count_per_order ON customers.customer_id = count_per_order.customer_id
GROUP BY customers.customer_city ORDER BY average_orders DESC;

#3 Calculate the percentage of total revenue contributed by each product category.
SELECT UPPER(products.product_category) AS category, 
ROUND(SUM(payments.payment_value)/(SELECT SUM(payment_value) FROM payments)*100,2) As sales_percentage
FROM products INNER JOIN order_items ON products.product_id = order_items.product_id 
INNER JOIN payments ON payments.order_id = order_items.order_id 
GROUP BY category ORDER BY sales_percentage DESC;

#4 Identify the correlation between product price and the number of times a product has been purchased.
SELECT products.product_category, COUNT(products.product_id) AS product_count, ROUND(AVG(order_items.price),2) AS average_item_price FROM order_items JOIN products 
ON order_items.product_id = products.product_id GROUP BY products.product_category;

#5  Calculate the total revenue generated by each seller, and rank them by revenue.
WITH SellerRevenue AS (
    SELECT order_items.seller_id, ROUND(SUM(payments.payment_value), 2) AS revenue 
    FROM order_items JOIN payments ON order_items.order_id = payments.order_id 
    GROUP BY order_items.seller_id
)
SELECT seller_id, revenue, DENSE_RANK() OVER (ORDER BY revenue DESC) AS ranks
FROM SellerRevenue;

-- ADVANCE QUESTIONS--

#1 Calculate the moving average of order values for each customer over their order history.
SELECT customer_id, order_purchase_timestamp, payment, AVG(payment)
OVER(partition by customer_id ORDER BY order_purchase_timestamp 
ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS move_avg 
FROM(
SELECT orders.customer_id, orders.order_purchase_timestamp, payments.payment_value AS payment
FROM orders JOIN payments ON orders.order_id = payments.order_id
) AS a


#2 Calculate the cumulative sales per month for each year.
SELECT years, months, payment, SUM(payment)
OVER(ORDER BY years, months) AS cumulative_sales FROM
(SELECT YEAR(orders.order_purchase_timestamp) AS years,
MONTH(orders.order_purchase_timestamp) AS months,
ROUND(SUM(payments.payment_value),2) AS payment
FROM orders JOIN payments ON orders.order_id = payments.order_id
GROUP BY years, months ORDER BY years, months) AS a

#3 Calculate the year-over-year growth rate of total sales.
)
SELECT 
years, ((payment - LAG(payment, 1) OVER(ORDER BY years))/
LAG(payment, 1) OVER(ORDER BY years)) * 100 AS yoy_growth
FROM a;

WITH a AS(SELECT YEAR(orders.order_purchase_timestamp) AS years,
ROUND(SUM(payments.payment_value),2) AS payment
FROM orders JOIN payments ON orders.order_id = payments.order_id
GROUP BY years ORDER BY years)

SELECT years, ((payment - LAG(payment, 1) OVER(ORDER BY years))/
LAG(payment, 1) OVER(ORDER BY years)) * 100   FROM a;

#4 Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase

with a as (select customers.customer_id,
min(orders.order_purchase_timestamp) first_order
from customers join orders
on customers.customer_id = orders.customer_id
group by customers.customer_id),

b as (select a.customer_id, count(distinct orders.order_purchase_timestamp) next_order
from a join orders
on orders.customer_id = a.customer_id
and orders.order_purchase_timestamp > first_order
and orders.order_purchase_timestamp < 
date_add(first_order, interval 6 month)
group by a.customer_id) 

select 100 * (count( distinct a.customer_id)/ count(distinct b.customer_id)) 
from a left join b 
on a.customer_id = b.customer_id;

#5  Identify the top 3 customers who spent the most money in each year.
WITH a AS
(SELECT YEAR(orders.order_purchase_timestamp) AS years,
orders.order_id, orders.customer_id, SUM(payments.payment_value) AS payments,
DENSE_RANK() OVER(PARTITION BY YEAR (orders.order_purchase_timestamp) 
ORDER BY SUM(payments.payment_value) DESC) AS d_rank 
FROM payments JOIN orders ON payments.order_id = orders.order_id 
GROUP BY YEAR(orders.order_purchase_timestamp), orders.order_id, orders.customer_id
)
SELECT years, order_id, customer_id, d_rank FROM a WHERE d_rank <= 3;













